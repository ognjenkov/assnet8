// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using assnet8.Data;

#nullable disable

namespace assnet8.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250129191856_broj4")]
    partial class broj4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GalleryTeam", b =>
                {
                    b.Property<Guid>("GalleriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GalleriesId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("GalleryTeam");
                });

            modelBuilder.Entity("GameTag", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("GameTag");
                });

            modelBuilder.Entity("ListingTag", b =>
                {
                    b.Property<Guid>("ListingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ListingsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ListingTag");
                });

            modelBuilder.Entity("ServiceTag", b =>
                {
                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServicesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ServiceTag");
                });

            modelBuilder.Entity("assnet8.Models.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpNumber")
                        .HasColumnType("int");

                    b.Property<int>("RentNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("assnet8.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GoogleMapsLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ThumbnailImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId")
                        .IsUnique()
                        .HasFilter("[GalleryId] IS NOT NULL");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ThumbnailImageId")
                        .IsUnique()
                        .HasFilter("[ThumbnailImageId] IS NOT NULL");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("assnet8.Models.Gallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("assnet8.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LengthTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("assnet8.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("assnet8.Models.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ThumbnailImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId")
                        .IsUnique()
                        .HasFilter("[GalleryId] IS NOT NULL");

                    b.HasIndex("LocationId");

                    b.HasIndex("ThumbnailImageId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("assnet8.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("assnet8.Models.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("assnet8.Models.Municipality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("assnet8.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogoImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("LogoImageId")
                        .IsUnique()
                        .HasFilter("[LogoImageId] IS NOT NULL");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasFilter("[TeamId] IS NOT NULL");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("assnet8.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ThumbnailImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ThumbnailImageId")
                        .IsUnique()
                        .HasFilter("[ThumbnailImageId] IS NOT NULL");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("assnet8.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("assnet8.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LogoImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LogoImageId")
                        .IsUnique()
                        .HasFilter("[LogoImageId] IS NOT NULL");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("assnet8.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleUid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VerifiedEmail")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProfileImageId")
                        .IsUnique()
                        .HasFilter("[ProfileImageId] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GalleryTeam", b =>
                {
                    b.HasOne("assnet8.Models.Gallery", null)
                        .WithMany()
                        .HasForeignKey("GalleriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameTag", b =>
                {
                    b.HasOne("assnet8.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ListingTag", b =>
                {
                    b.HasOne("assnet8.Models.Listing", null)
                        .WithMany()
                        .HasForeignKey("ListingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceTag", b =>
                {
                    b.HasOne("assnet8.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("assnet8.Models.Entry", b =>
                {
                    b.HasOne("assnet8.Models.User", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("assnet8.Models.Field", b =>
                {
                    b.HasOne("assnet8.Models.Gallery", "Gallery")
                        .WithOne("Field")
                        .HasForeignKey("assnet8.Models.Field", "GalleryId");

                    b.HasOne("assnet8.Models.Location", "Location")
                        .WithMany("Fields")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Organization", "Organization")
                        .WithMany("Fields")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Image", "ThumbnailImage")
                        .WithOne("Field")
                        .HasForeignKey("assnet8.Models.Field", "ThumbnailImageId");

                    b.Navigation("Gallery");

                    b.Navigation("Location");

                    b.Navigation("Organization");

                    b.Navigation("ThumbnailImage");
                });

            modelBuilder.Entity("assnet8.Models.Gallery", b =>
                {
                    b.HasOne("assnet8.Models.Service", "Service")
                        .WithMany("Galleries")
                        .HasForeignKey("ServiceId");

                    b.HasOne("assnet8.Models.User", "User")
                        .WithMany("Galleries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("assnet8.Models.Game", b =>
                {
                    b.HasOne("assnet8.Models.Field", "Field")
                        .WithMany("Games")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Organization", "Organization")
                        .WithMany("Games")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("assnet8.Models.Image", b =>
                {
                    b.HasOne("assnet8.Models.Gallery", "Gallery")
                        .WithMany("Images")
                        .HasForeignKey("GalleryId");

                    b.HasOne("assnet8.Models.User", "User")
                        .WithMany("UploadedImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("assnet8.Models.Listing", b =>
                {
                    b.HasOne("assnet8.Models.Gallery", "Gallery")
                        .WithOne("Listing")
                        .HasForeignKey("assnet8.Models.Listing", "GalleryId");

                    b.HasOne("assnet8.Models.Location", "Location")
                        .WithMany("Listings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Image", "ThumbnailImage")
                        .WithOne("Listing")
                        .HasForeignKey("assnet8.Models.Listing", "ThumbnailImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("Location");

                    b.Navigation("ThumbnailImage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("assnet8.Models.Membership", b =>
                {
                    b.HasOne("assnet8.Models.Team", "Team")
                        .WithMany("Memberships")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.User", "User")
                        .WithOne("Membership")
                        .HasForeignKey("assnet8.Models.Membership", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("assnet8.Models.Municipality", b =>
                {
                    b.HasOne("assnet8.Models.Location", "Location")
                        .WithMany("Municipalities")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("assnet8.Models.Organization", b =>
                {
                    b.HasOne("assnet8.Models.User", "Creator")
                        .WithOne("Organization")
                        .HasForeignKey("assnet8.Models.Organization", "CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Location", null)
                        .WithMany("Organizations")
                        .HasForeignKey("LocationId");

                    b.HasOne("assnet8.Models.Image", "LogoImage")
                        .WithOne("Organization")
                        .HasForeignKey("assnet8.Models.Organization", "LogoImageId");

                    b.HasOne("assnet8.Models.Team", "Team")
                        .WithOne("Organization")
                        .HasForeignKey("assnet8.Models.Organization", "TeamId");

                    b.Navigation("Creator");

                    b.Navigation("LogoImage");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("assnet8.Models.Service", b =>
                {
                    b.HasOne("assnet8.Models.User", "CreatedBy")
                        .WithMany("Services")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("assnet8.Models.Organization", "Organization")
                        .WithMany("Services")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Image", "ThumbnailImage")
                        .WithOne("Service")
                        .HasForeignKey("assnet8.Models.Service", "ThumbnailImageId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Location");

                    b.Navigation("Organization");

                    b.Navigation("ThumbnailImage");
                });

            modelBuilder.Entity("assnet8.Models.Team", b =>
                {
                    b.HasOne("assnet8.Models.Image", "LogoImage")
                        .WithOne("Team")
                        .HasForeignKey("assnet8.Models.Team", "LogoImageId");

                    b.Navigation("LogoImage");
                });

            modelBuilder.Entity("assnet8.Models.User", b =>
                {
                    b.HasOne("assnet8.Models.Image", "ProfileImage")
                        .WithOne()
                        .HasForeignKey("assnet8.Models.User", "ProfileImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("assnet8.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("ProfileImage");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("assnet8.Models.Field", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("assnet8.Models.Gallery", b =>
                {
                    b.Navigation("Field");

                    b.Navigation("Images");

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("assnet8.Models.Image", b =>
                {
                    b.Navigation("Field");

                    b.Navigation("Listing");

                    b.Navigation("Organization");

                    b.Navigation("Service");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("assnet8.Models.Location", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Listings");

                    b.Navigation("Municipalities");

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("assnet8.Models.Organization", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Games");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("assnet8.Models.Service", b =>
                {
                    b.Navigation("Galleries");
                });

            modelBuilder.Entity("assnet8.Models.Team", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("assnet8.Models.User", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Galleries");

                    b.Navigation("Listings");

                    b.Navigation("Membership");

                    b.Navigation("Organization");

                    b.Navigation("Services");

                    b.Navigation("UploadedImages");
                });
#pragma warning restore 612, 618
        }
    }
}
