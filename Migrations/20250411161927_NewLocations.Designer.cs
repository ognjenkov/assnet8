// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using assnet8.Data;

#nullable disable

namespace assnet8.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250411161927_NewLocations")]
    partial class NewLocations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameTag", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GamesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("GameTag");
                });

            modelBuilder.Entity("ListingTag", b =>
                {
                    b.Property<Guid>("ListingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ListingsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ListingTag");
                });

            modelBuilder.Entity("MembershipRole", b =>
                {
                    b.Property<Guid>("MembershipsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MembershipsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("MembershipRole");
                });

            modelBuilder.Entity("ServiceTag", b =>
                {
                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServicesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ServiceTag");
                });

            modelBuilder.Entity("assnet8.Models.Entry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpNumber")
                        .HasColumnType("int");

                    b.Property<int>("RentNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("assnet8.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GoogleMapsLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ThumbnailImageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId")
                        .IsUnique()
                        .HasFilter("[GalleryId] IS NOT NULL");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ThumbnailImageId")
                        .IsUnique()
                        .HasFilter("[ThumbnailImageId] IS NOT NULL");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("assnet8.Models.Gallery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("assnet8.Models.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LengthTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("assnet8.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("S3Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId");

                    b.HasIndex("S3Id")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("assnet8.Models.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ThumbnailImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId")
                        .IsUnique()
                        .HasFilter("[GalleryId] IS NOT NULL");

                    b.HasIndex("LocationId");

                    b.HasIndex("ThumbnailImageId")
                        .IsUnique()
                        .HasFilter("[ThumbnailImageId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("assnet8.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Region")
                        .IsUnique();

                    b.HasIndex("Registration")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111197"),
                            Region = "Aleksinac",
                            Registration = "AL"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111196"),
                            Region = "Aranđelovac",
                            Registration = "AR"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111195"),
                            Region = "Aleksandrovac",
                            Registration = "AC"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111194"),
                            Region = "Bajina Bašta",
                            Registration = "BB"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111193"),
                            Region = "Beograd",
                            Registration = "BG"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111192"),
                            Region = "Bor",
                            Registration = "BO"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111191"),
                            Region = "Bačka Palanka",
                            Registration = "BP"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111189"),
                            Region = "Bačka Topola",
                            Registration = "BT"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111188"),
                            Region = "Bogatić",
                            Registration = "BĆ"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111187"),
                            Region = "Bujanovac",
                            Registration = "BU"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111186"),
                            Region = "Bečej",
                            Registration = "BČ"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111185"),
                            Region = "Valjevo",
                            Registration = "VA"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111184"),
                            Region = "Vrnjačka Banja",
                            Registration = "VB"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111183"),
                            Region = "Vlasotince",
                            Registration = "VL"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111182"),
                            Region = "Velika Plana",
                            Registration = "VP"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111181"),
                            Region = "Vranje",
                            Registration = "VR"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111179"),
                            Region = "Vrbas",
                            Registration = "VS"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111178"),
                            Region = "Vršac",
                            Registration = "VŠ"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111177"),
                            Region = "Gnjilane",
                            Registration = "GL"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111176"),
                            Region = "Gornji Milanovac",
                            Registration = "GM"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111175"),
                            Region = "Despotovac",
                            Registration = "DE"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111174"),
                            Region = "Đakovica",
                            Registration = "ĐA"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111173"),
                            Region = "Zaječar",
                            Registration = "ZA"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111172"),
                            Region = "Zrenjanin",
                            Registration = "ZR"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111171"),
                            Region = "Inđija",
                            Registration = "IN"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111170"),
                            Region = "Ivanjica",
                            Registration = "IC"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111169"),
                            Region = "Jagodina",
                            Registration = "JA"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111168"),
                            Region = "Kanjiža",
                            Registration = "KA"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111167"),
                            Region = "Kraljevo",
                            Registration = "KV"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111166"),
                            Region = "Kragujevac",
                            Registration = "KG"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111165"),
                            Region = "Knjaževac",
                            Registration = "KŽ"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111164"),
                            Region = "Kikinda",
                            Registration = "KI"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111163"),
                            Region = "Kladovo",
                            Registration = "KL"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111162"),
                            Region = "Kosovska Mitrovica",
                            Registration = "KM"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111161"),
                            Region = "Kovin",
                            Registration = "KO"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111159"),
                            Region = "Koceljeva",
                            Registration = "KC"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111158"),
                            Region = "Kruševac",
                            Registration = "KŠ"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111157"),
                            Region = "Lebane",
                            Registration = "LB"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111156"),
                            Region = "Leskovac",
                            Registration = "LE"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111155"),
                            Region = "Loznica",
                            Registration = "LO"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111154"),
                            Region = "Lučani",
                            Registration = "LU"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111153"),
                            Region = "Nova Varoš",
                            Registration = "NV"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111152"),
                            Region = "Negotin",
                            Registration = "NG"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111151"),
                            Region = "Niš",
                            Registration = "NI"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111149"),
                            Region = "Novi Pazar",
                            Registration = "NP"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111148"),
                            Region = "Novi Sad",
                            Registration = "NS"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111147"),
                            Region = "Pančevo",
                            Registration = "PA"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111146"),
                            Region = "Priboj",
                            Registration = "PB"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111145"),
                            Region = "Peć",
                            Registration = "PE"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111144"),
                            Region = "Požega",
                            Registration = "PŽ"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111143"),
                            Region = "Prizren",
                            Registration = "PZ"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111142"),
                            Region = "Pirot",
                            Registration = "PI"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111141"),
                            Region = "Prokuplje",
                            Registration = "PK"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111139"),
                            Region = "Paraćin",
                            Registration = "PN"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111138"),
                            Region = "Požarevac",
                            Registration = "PO"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111137"),
                            Region = "Prijepolje",
                            Registration = "PP"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111136"),
                            Region = "Priština",
                            Registration = "PR"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111135"),
                            Region = "Petrovac",
                            Registration = "PT"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111134"),
                            Region = "Raška",
                            Registration = "RA"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111133"),
                            Region = "Ruma",
                            Registration = "RU"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111132"),
                            Region = "Senta",
                            Registration = "SA"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111131"),
                            Region = "Surdulica",
                            Registration = "SC"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111129"),
                            Region = "Svijalnac",
                            Registration = "SV"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111128"),
                            Region = "Smederevo",
                            Registration = "SD"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111127"),
                            Region = "Sjenica",
                            Registration = "SJ"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111126"),
                            Region = "Sremska Mitrovica",
                            Registration = "SM"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111125"),
                            Region = "Sombor",
                            Registration = "SO"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111124"),
                            Region = "Smederevska Palanka",
                            Registration = "SP"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111123"),
                            Region = "Stara Pazova",
                            Registration = "ST"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111122"),
                            Region = "Subotica",
                            Registration = "SU"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111121"),
                            Region = "Topola",
                            Registration = "TO"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111119"),
                            Region = "Trstenik",
                            Registration = "TS"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111118"),
                            Region = "Tutin",
                            Registration = "TT"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111117"),
                            Region = "Ćuprija",
                            Registration = "ĆU"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111116"),
                            Region = "Ub",
                            Registration = "UB"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111115"),
                            Region = "Užice",
                            Registration = "UE"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111114"),
                            Region = "Uroševac",
                            Registration = "UR"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            Region = "Čačak",
                            Registration = "ČA"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            Region = "Šabac",
                            Registration = "ŠA"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Region = "Šid",
                            Registration = "ŠI"
                        });
                });

            modelBuilder.Entity("assnet8.Models.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("assnet8.Models.Municipality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("assnet8.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogoImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("LogoImageId")
                        .IsUnique()
                        .HasFilter("[LogoImageId] IS NOT NULL");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasFilter("[TeamId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("assnet8.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Name = "Member"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "TeamLeader"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Name = "Creator"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Name = "Organizer"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Name = "ServiceProvider"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Name = "OrganizationOwner"
                        });
                });

            modelBuilder.Entity("assnet8.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GalleryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ThumbnailImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("GalleryId")
                        .IsUnique()
                        .HasFilter("[GalleryId] IS NOT NULL");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ThumbnailImageId")
                        .IsUnique()
                        .HasFilter("[ThumbnailImageId] IS NOT NULL");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("assnet8.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("assnet8.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LogoImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("LogoImageId")
                        .IsUnique()
                        .HasFilter("[LogoImageId] IS NOT NULL");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("assnet8.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GoogleUid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PersistLogin")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProfileImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshTokenApp")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefreshTokenCookie")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("VerifiedEmail")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ProfileImageId")
                        .IsUnique()
                        .HasFilter("[ProfileImageId] IS NOT NULL");

                    b.HasIndex("RefreshTokenApp")
                        .IsUnique()
                        .HasFilter("[RefreshTokenApp] IS NOT NULL");

                    b.HasIndex("RefreshTokenCookie")
                        .IsUnique()
                        .HasFilter("[RefreshTokenCookie] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GameTag", b =>
                {
                    b.HasOne("assnet8.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ListingTag", b =>
                {
                    b.HasOne("assnet8.Models.Listing", null)
                        .WithMany()
                        .HasForeignKey("ListingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MembershipRole", b =>
                {
                    b.HasOne("assnet8.Models.Membership", null)
                        .WithMany()
                        .HasForeignKey("MembershipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceTag", b =>
                {
                    b.HasOne("assnet8.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("assnet8.Models.Entry", b =>
                {
                    b.HasOne("assnet8.Models.Game", "Game")
                        .WithMany("Entries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.User", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("assnet8.Models.Field", b =>
                {
                    b.HasOne("assnet8.Models.Gallery", "Gallery")
                        .WithOne("Field")
                        .HasForeignKey("assnet8.Models.Field", "GalleryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("assnet8.Models.Location", "Location")
                        .WithMany("Fields")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("assnet8.Models.Organization", "Organization")
                        .WithMany("Fields")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Image", "ThumbnailImage")
                        .WithOne("Field")
                        .HasForeignKey("assnet8.Models.Field", "ThumbnailImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Gallery");

                    b.Navigation("Location");

                    b.Navigation("Organization");

                    b.Navigation("ThumbnailImage");
                });

            modelBuilder.Entity("assnet8.Models.Gallery", b =>
                {
                    b.HasOne("assnet8.Models.Team", "Team")
                        .WithMany("Galleries")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("assnet8.Models.User", "User")
                        .WithMany("Galleries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("assnet8.Models.Game", b =>
                {
                    b.HasOne("assnet8.Models.Field", "Field")
                        .WithMany("Games")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Organization", "Organization")
                        .WithMany("Games")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("assnet8.Models.Image", b =>
                {
                    b.HasOne("assnet8.Models.Gallery", "Gallery")
                        .WithMany("Images")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("assnet8.Models.User", "UploadedImagesUser")
                        .WithMany("UploadedImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("UploadedImagesUser");
                });

            modelBuilder.Entity("assnet8.Models.Listing", b =>
                {
                    b.HasOne("assnet8.Models.Gallery", "Gallery")
                        .WithOne("Listing")
                        .HasForeignKey("assnet8.Models.Listing", "GalleryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("assnet8.Models.Location", "Location")
                        .WithMany("Listings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("assnet8.Models.Image", "ThumbnailImage")
                        .WithOne("Listing")
                        .HasForeignKey("assnet8.Models.Listing", "ThumbnailImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("assnet8.Models.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");

                    b.Navigation("Location");

                    b.Navigation("ThumbnailImage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("assnet8.Models.Membership", b =>
                {
                    b.HasOne("assnet8.Models.Team", "Team")
                        .WithMany("Memberships")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assnet8.Models.User", "User")
                        .WithOne("Membership")
                        .HasForeignKey("assnet8.Models.Membership", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("assnet8.Models.Municipality", b =>
                {
                    b.HasOne("assnet8.Models.Location", "Location")
                        .WithMany("Municipalities")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("assnet8.Models.Organization", b =>
                {
                    b.HasOne("assnet8.Models.Location", null)
                        .WithMany("Organizations")
                        .HasForeignKey("LocationId");

                    b.HasOne("assnet8.Models.Image", "LogoImage")
                        .WithOne("Organization")
                        .HasForeignKey("assnet8.Models.Organization", "LogoImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("assnet8.Models.Team", "Team")
                        .WithOne("Organization")
                        .HasForeignKey("assnet8.Models.Organization", "TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("assnet8.Models.User", "User")
                        .WithOne("Organization")
                        .HasForeignKey("assnet8.Models.Organization", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LogoImage");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("assnet8.Models.Service", b =>
                {
                    b.HasOne("assnet8.Models.User", "CreatedByUser")
                        .WithMany("Services")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Gallery", "Gallery")
                        .WithOne("Service")
                        .HasForeignKey("assnet8.Models.Service", "GalleryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("assnet8.Models.Location", "Location")
                        .WithMany("Services")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("assnet8.Models.Organization", "Organization")
                        .WithMany("Services")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Image", "ThumbnailImage")
                        .WithOne("Service")
                        .HasForeignKey("assnet8.Models.Service", "ThumbnailImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Gallery");

                    b.Navigation("Location");

                    b.Navigation("Organization");

                    b.Navigation("ThumbnailImage");
                });

            modelBuilder.Entity("assnet8.Models.Team", b =>
                {
                    b.HasOne("assnet8.Models.User", "Creator")
                        .WithOne("Team")
                        .HasForeignKey("assnet8.Models.Team", "CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("assnet8.Models.Location", "Location")
                        .WithMany("Teams")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("assnet8.Models.Image", "LogoImage")
                        .WithOne("Team")
                        .HasForeignKey("assnet8.Models.Team", "LogoImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("Location");

                    b.Navigation("LogoImage");
                });

            modelBuilder.Entity("assnet8.Models.User", b =>
                {
                    b.HasOne("assnet8.Models.Image", "ProfileImage")
                        .WithOne("ProfileImageUser")
                        .HasForeignKey("assnet8.Models.User", "ProfileImageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProfileImage");
                });

            modelBuilder.Entity("assnet8.Models.Field", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("assnet8.Models.Gallery", b =>
                {
                    b.Navigation("Field");

                    b.Navigation("Images");

                    b.Navigation("Listing");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("assnet8.Models.Game", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("assnet8.Models.Image", b =>
                {
                    b.Navigation("Field");

                    b.Navigation("Listing");

                    b.Navigation("Organization");

                    b.Navigation("ProfileImageUser");

                    b.Navigation("Service");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("assnet8.Models.Location", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Listings");

                    b.Navigation("Municipalities");

                    b.Navigation("Organizations");

                    b.Navigation("Services");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("assnet8.Models.Organization", b =>
                {
                    b.Navigation("Fields");

                    b.Navigation("Games");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("assnet8.Models.Team", b =>
                {
                    b.Navigation("Galleries");

                    b.Navigation("Memberships");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("assnet8.Models.User", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Galleries");

                    b.Navigation("Listings");

                    b.Navigation("Membership");

                    b.Navigation("Organization");

                    b.Navigation("Services");

                    b.Navigation("Team");

                    b.Navigation("UploadedImages");
                });
#pragma warning restore 612, 618
        }
    }
}
